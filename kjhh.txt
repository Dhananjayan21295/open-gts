


 class Point {
	
	
	
	    int x, y;
	 
	    Point()
	    {}
	 
	    Point(int p, int q)
	    {
	        x = p;
	        y = q;
	    }
	}
	 
	 class Position_Point_WRT_Polygon
	{
		// Given three colinear points p, q, r, the function checks if
		// point q lies on line segment 'pr'
	 
	    public static boolean onSegment(Point p, Point q, Point r)
	    {
	        if (q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x)
	                && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y))
	            return true;
	        return false;
	    }

		// To find orientation of ordered triplet (p, q, r).
		// The function returns following values
		// 0 --> p, q and r are colinear
		// 1 --> Clockwise
		// 2 --> Counterclockwise
	 
	    public static int orientation(Point p, Point q, Point r)
	    {
	        int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	 
	        if (val == 0)                  // colinear
	            return 0;                  //clock or counterclock wise
	        return (val > 0) ? 1 : 2;
	    }


				// The function that returns true if line segment 'p1q1'
				// and 'p2q2' intersect.
	 
	    public static boolean doIntersect(Point p1, Point q1, Point p2, Point q2)
	    {
			// Find the four orientations needed for general and
                       // special cases
	 
	        int o1 = orientation(p1, q1, p2);
	        int o2 = orientation(p1, q1, q2);
	        int o3 = orientation(p2, q2, p1);
	        int o4 = orientation(p2, q2, q1);
	 	
		// General case
		
	        if (o1 != o2 && o3 != o4)
	            return true;

		// Special Cases
               // p1, q1 and p2 are colinear and p2 lies on segment p1q1

	 
	        if (o1 == 0 && onSegment(p1, p2, q1))
	            return true;
		
		
    		// p1, q1 and p2 are colinear and q2 lies on segment p1q1	

	 
	        if (o2 == 0 && onSegment(p1, q2, q1))
	            return true;

		
              // p1, q1 and p2 are colinear and p1 lies on segment p1q1

	 
	        if (o3 == 0 && onSegment(p2, p1, q2))
	            return true;

	      
            // p1, q1 and p2 are colinear and q1 lies on segment p1q1

	 
	        if (o4 == 0 && onSegment(p2, q1, q2))
	            return true;
	 
	        return false; //Doesn't fall in any of the above cases
	    }


		// Returns true if the point p lies inside the polygon[] with n vertices
	 
	    public static boolean isInside(Point polygon[], int n, Point p)
	    {
	        int INF = 10000;  // Define Infinite (Using INT_MAX caused overflow problems)
					

    		// There must be at least 3 vertices in polygon[]
	        if (n < 3)
	            return false;

    // Create a point for line segment from p to infinite
	        Point extreme = new Point(INF, p.y);
	 
    // Count intersections of the above line with sides of polygon
	        int count = 0, i = 0;
	        do
	        {
	            int next = (i + 1) % n;

        // Check if the line segment from 'p' to 'extreme' intersects
        // with the line segment from 'polygon[i]' to 'polygon[next]'
	            if (doIntersect(polygon[i], polygon[next], p, extreme))
	            {
             // If the point 'p' is colinear with line segment 'i-next',
            // then check if it lies on segment. If it lies, return true,
            // otherwise false
	                if (orientation(polygon[i], p, polygon[next]) == 0)
	                    return onSegment(polygon[i], p, polygon[next]);
	 
	                count++;
	            }
	            i = next;
	        } while (i != 0);

             // Return true if count is odd, false otherwise
	        return (count & 1) == 1 ? true : false;// Same as (count%2 == 1)
	    }
	 
	    public static void main(String args[])
	    {
	        Point polygon1[] = { new Point(0, 0), new Point(10, 0),
	                new Point(10, 10), new Point(0, 10) };
	        int n = 4;
	 
	        Point p = new Point(20, 20);
	        System.out.println("Point P(" + p.x + ", " + p.y
	                + ") lies inside polygon1: " + isInside(polygon1, n, p));
	        p = new Point(5, 5);
	        System.out.println("Point P(" + p.x + ", " + p.y
	                + ") lies inside polygon1: " + isInside(polygon1, n, p));
	 
	        Point polygon2[] = { new Point(0, 0), new Point(5, 5), new Point(5, 0) };
	        n = 3;
	 
	        p = new Point(3, 3);
	        System.out.println("Point P(" + p.x + ", " + p.y
	                + ") lies inside polygon2: " + isInside(polygon2, n, p));
	        p = new Point(5, 1);
	        System.out.println("Point P(" + p.x + ", " + p.y
	                + ") lies inside polygon2: " + isInside(polygon2, n, p));
	        p = new Point(8, 1);
	        System.out.println("Point P(" + p.x + ", " + p.y
	                + ") lies inside polygon2: " + isInside(polygon2, n, p));
	 
	        Point polygon3[] = { new Point(0, 0), new Point(10, 0),
	                new Point(10, 10), new Point(0, 10), new Point(5, 5) };
	        n = 5;
	 
	        p = new Point(-1, 10);
	        System.out.println("Point P(" + p.x + ", " + p.y
	                + ") lies inside polygon3: " + isInside(polygon3, n, p));
	    }
	}


